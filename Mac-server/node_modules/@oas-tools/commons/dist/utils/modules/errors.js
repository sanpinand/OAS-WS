"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.AuthError = exports.SecurityError = exports.RoutingError = exports.ResponseValidationError = exports.RequestValidationError = exports.ValidationError = exports.UnsupportedError = exports.ConfigError = void 0;
class BaseError extends Error {
    constructor(name, message) {
        super(message);
        this.name = name;
        Object.setPrototypeOf(this, new.target.prototype);
    }
}
class ConfigError extends BaseError {
    constructor(message) {
        super("ConfigError", message);
    }
}
exports.ConfigError = ConfigError;
class UnsupportedError extends BaseError {
    constructor(message) {
        super("UnsupportedError", message);
    }
}
exports.UnsupportedError = UnsupportedError;
class ValidationError extends BaseError {
    constructor(message, name = "ValidationError") {
        super(name, message);
    }
}
exports.ValidationError = ValidationError;
class RequestValidationError extends ValidationError {
    constructor(message) {
        super(message, "RequestValidationError");
    }
}
exports.RequestValidationError = RequestValidationError;
class ResponseValidationError extends ValidationError {
    constructor(message) {
        super(message, "ResponseValidationError");
    }
}
exports.ResponseValidationError = ResponseValidationError;
class RoutingError extends BaseError {
    constructor(message) {
        super("RoutingError", message);
    }
}
exports.RoutingError = RoutingError;
class SecurityError extends BaseError {
    constructor(message) {
        super("SecurityError", message);
    }
}
exports.SecurityError = SecurityError;
class AuthError extends BaseError {
    constructor(message) {
        super("AuthError", message);
    }
}
exports.AuthError = AuthError;
