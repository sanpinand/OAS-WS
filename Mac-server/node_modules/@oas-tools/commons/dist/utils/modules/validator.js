"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.validate = exports.validateOASFile = void 0;
const js_yaml_1 = require("js-yaml");
const fs_1 = require("fs");
const path_1 = require("path");
const _2020_js_1 = require("ajv/dist/2020.js");
const ajv_draft_04_1 = require("ajv-draft-04");
const ajv_formats_1 = require("ajv-formats");
const index_1 = require("../index");
function validateOASFile(oasFilePath) {
    if (!(0, fs_1.existsSync)(oasFilePath)) {
        throw new index_1.ValidationError(`Specification file at ${oasFilePath} not found`);
    }
    const oasFile = (0, js_yaml_1.load)((0, fs_1.readFileSync)(oasFilePath, "utf8"));
    const version = oasFile.openapi;
    let ajv;
    let schema;
    switch (true) {
        case (/^3\.0\.\d(-.+)?$/).test(version):
            ajv = new ajv_draft_04_1.default({ strict: false, logger: index_1.logger });
            schema = JSON.parse((0, fs_1.readFileSync)((0, path_1.join)(__dirname, "../../../schemas/v3.0/schema.json"), "utf8"));
            break;
        case (/^3\.1\.\d+(-.+)?$/).test(version):
            ajv = new _2020_js_1.default({ strict: false, logger: index_1.logger });
            ajv.addFormat("media-range", "^[^\\s;]+/[^\\s;]+$");
            ajv.addSchema(JSON.parse((0, fs_1.readFileSync)((0, path_1.join)(__dirname, "../../../schemas/v3.1/dialect.json"), "utf8")));
            ajv.addSchema(JSON.parse((0, fs_1.readFileSync)((0, path_1.join)(__dirname, "../../../schemas/v3.1/vocab.json"), "utf8")));
            ajv.addSchema(JSON.parse((0, fs_1.readFileSync)((0, path_1.join)(__dirname, "../../../schemas/v3.1/schema.json"), "utf8")));
            schema = JSON.parse((0, fs_1.readFileSync)((0, path_1.join)(__dirname, "../../../schemas/v3.1/schema-base.json"), "utf8"));
            break;
        default:
            throw new index_1.ValidationError(`Unsupported OpenAPI version: ${version}. Supported versions are 3.0.X, 3.1.X`);
    }
    (0, ajv_formats_1.default)(ajv);
    const validate = ajv.compile(schema);
    const valid = validate(oasFile);
    if (!valid) {
        throw new index_1.ValidationError(`Specification file does not meet OpenAPI ${version} schema.\n` +
            `${validate.errors.map((e) => `- Validation failed at ${e.instancePath.split('/').map((s) => s.includes('~1') ? `[${s.replace(/~1/g, '/')}]` : s).join('/')} > ${e.message}`).join("\n")}`);
    }
}
exports.validateOASFile = validateOASFile;
function validate(body, schema, version) {
    let ajv;
    if ((/^3\.0\.\d(-.+)?$/).test(version))
        ajv = new ajv_draft_04_1.default({ strict: false, logger: index_1.logger });
    else
        ajv = new _2020_js_1.default({ strict: false, logger: index_1.logger });
    (0, ajv_formats_1.default)(ajv);
    const validate = ajv.compile(schema);
    return { valid: validate(body), validate: validate };
}
exports.validate = validate;
