"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.logger = void 0;
const winston_1 = require("winston");
const colorizer = winston_1.format.colorize();
const defaults = {
    format: winston_1.format.combine(winston_1.format.timestamp({ format: "YYYY-MM-DD HH:MM:SS" }), winston_1.format.label({ label: "oas-tools" }), winston_1.format.printf(({ timestamp, label, level, message }) => [
        colorizer.colorize("date", timestamp),
        colorizer.colorize("label", `[${label}]`),
        colorizer.colorize(level, `${level.toUpperCase()}:`),
        message,
    ].join(" "))),
    levels: {
        error: 7,
        warn: 8,
        info: 9,
        debug: 10,
    },
    colors: {
        error: "bold red",
        warn: "bold yellow",
        info: "bold blue",
        debug: "bold green",
        date: "italic gray",
        label: "bold cyan",
    },
};
class Logger {
    config;
    #logger;
    constructor() {
        (0, winston_1.addColors)(defaults.colors);
        this.config = {
            levels: defaults.levels,
            exitOnError: false,
            transports: [
                new winston_1.transports.Console({
                    level: "info",
                    handleExceptions: true,
                    format: defaults.format,
                }),
            ],
        };
        this.#logger = (0, winston_1.createLogger)(this.config);
    }
    configure(conf) {
        if (conf.customLogger) {
            this.#logger = conf.customLogger;
        }
        else {
            this.config.transports[0].level = conf.level;
            if (conf.logFile) {
                this.config.transports = [
                    ...this.config.transports,
                    new winston_1.transports.File({
                        level: conf.level,
                        filename: conf.logFilePath,
                        handleExceptions: true,
                        maxsize: 5242880,
                        format: winston_1.format.combine(winston_1.format.timestamp({ format: "YYYY-MM-DD HH:MM:SS" }), winston_1.format.label({ label: "oas-tools" }), winston_1.format.printf(({ timestamp, label, level, message }) => `${timestamp} [${label}] ${level}: ${message}`)),
                    }),
                ];
            }
            this.#logger = (0, winston_1.createLogger)(this.config);
        }
    }
    debug(message) {
        this.#logger.debug(message);
    }
    info(message) {
        this.#logger.info(message);
    }
    log(message) {
        this.info(message);
    }
    warn(message) {
        this.#logger.warn(message);
    }
    error(message) {
        this.#logger.error(message);
    }
}
exports.logger = new Logger();
