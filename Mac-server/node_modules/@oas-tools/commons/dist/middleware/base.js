"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.OASBase = void 0;
const utils_1 = require("../utils");
const operations = [
    "get",
    "post",
    "put",
    "patch",
    "delete",
    "head",
    "options",
    "trace",
];
class OASBase {
    #middleware;
    #oasFile;
    constructor(oasFile, middleware) {
        this.#middleware = middleware;
        this.#oasFile = oasFile;
    }
    register(app, path) {
        let servers;
        if (this.#oasFile.servers?.length > 0) {
            servers = _getServers(this.#oasFile.servers);
        }
        else {
            servers = ["/"];
        }
        const methodObj = this.#oasFile.paths[path];
        if (methodObj.servers?.length > 0)
            servers = _getServers(methodObj.servers);
        Object.keys(methodObj ?? {})
            .filter((key) => operations.includes(key))
            .forEach((method) => {
            const pathItemObj = methodObj[method];
            if (pathItemObj.servers?.length > 0)
                servers = _getServers(pathItemObj.servers);
            servers.forEach(prefix => {
                app[method]((prefix + path).replace(/\/\//g, "/"), (req, res, next) => {
                    req.route.path = req.route.path.replace(prefix, prefix === "/" ? "/" : "");
                    this.#middleware(req, res, next);
                });
            });
        });
    }
    initialize(oasFile, _config) {
        return new OASBase(oasFile, (_req, _res, next) => next());
    }
    getMiddleware() {
        return this.#middleware;
    }
}
exports.OASBase = OASBase;
function _getServers(oasServers) {
    if (oasServers.length > 1) {
        utils_1.logger.warn("Multiple server hosting is not yet supported.");
    }
    return [...new Set(oasServers.flatMap(server => {
            const url = new URL(server.url, 'http://localhost');
            if (url.hostname !== "localhost" && url.hostname !== "127.0.0.1") {
                utils_1.logger.warn(`Found ${url.hostname} in servers property: Multiple server hosting is not yet supported. OAS Tools will assume all servers' host as localhost`);
            }
            if (server.variables) {
                return Object.entries(server.variables).flatMap(([varName, varObj]) => {
                    const regex = new RegExp(`%7B${varName}%7D`, "g");
                    if (varObj.enum?.length > 0) {
                        return varObj.enum.map(value => url.pathname.replace(regex, value));
                    }
                    else {
                        return url.pathname.replace(regex, varObj.default);
                    }
                });
            }
            else {
                return url.pathname;
            }
        }))];
}
